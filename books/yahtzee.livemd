# Yahtzee

## Scorecard

```elixir
defmodule Yahtzee.Scorecard do
  @upper_section [:ones, :twos, :threes, :fours, :fives, :sixes]
  @upper_section_bonus_threshold 62
  @upper_section_bonus 25
  @lower_section [
    :three_of_kind,
    :four_of_kind,
    :full_house,
    :small_straight,
    :large_straight,
    :chance,
    :yahtzee
  ]
  @yahtzee_bonus 100

  defstruct ones: nil,
            twos: nil,
            threes: nil,
            fours: nil,
            fives: nil,
            sixes: nil,
            upper_section_bonus: nil,
            upper_section: 0,
            three_of_kind: nil,
            four_of_kind: nil,
            full_house: nil,
            small_straight: nil,
            large_straight: nil,
            chance: nil,
            yahtzee: nil,
            yahtzee_bonus: 0,
            lower_section: 0,
            grand_total: 0

  def compute_total(scorecard) do
    scorecard |> upper_total() |> lower_total() |> grand_total()
  end

  def valid_category?(category),
    do: Enum.any?(@upper_section ++ @lower_section, fn x -> x == category end)

  def score_category(scorecard, category, dice) do
    cond do
      Enum.any?(@upper_section, fn x -> x == category end) ->
        compute_upper_section_category(
          scorecard,
          category,
          dice,
          Enum.find_index(@upper_section, fn x -> x == category end) + 1
        )

      Enum.any?(@lower_section, fn x -> x == category end) ->
        scorecard

      true ->
        Map.put(scorecard, category, 0)
    end
  end

  def is_complete?(scorecard),
    do: Enum.all?(Map.to_list(scorecard), fn x -> not is_nil(elem(x, 1)) end)

  defp compute_upper_section_category(scorecard, category, dice, target) do
    Map.put(
      scorecard,
      category,
      Enum.reduce(
        Enum.filter(Map.values(dice), fn value -> Map.get(value, :value) == target end),
        0,
        &(Map.get(&1, :value) + &2)
      )
    )
  end

  defp upper_total(scorecard) do
    total = Enum.reduce(Map.values(Map.take(scorecard, @upper_section)), 0, &(&1 + &2))

    if total > @upper_section_bonus_threshold do
      Map.put(
        Map.put(scorecard, :upper_section_bonus, @upper_section_bonus),
        :upper_section,
        total + @upper_section_bonus
      )
    else
      Map.put(scorecard, :upper_section, total)
    end
  end

  defp lower_total(scorecard) do
    Map.put(
      scorecard,
      :lower_section,
      @yahtzee_bonus * Map.get(scorecard, :yahtzee_bonus) +
        Enum.reduce(Map.values(Map.take(scorecard, @lower_section)), 0, &(&1 + &2))
    )
  end

  defp grand_total(scorecard) do
    Map.put(
      scorecard,
      :grand_total,
      Map.get(scorecard, :upper_section) + Map.get(scorecard, :lower_section)
    )
  end
end
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
scorecard = %Yahtzee.Scorecard{}
Yahtzee.Scorecard.is_complete?(scorecard)
```

## Yahtzee State

```elixir
defmodule Yahtzee.State do
  @dice_per_hand 5

  defstruct dice: for(i <- 1..@dice_per_hand, into: %{}, do: {i, %{value: nil, hold: false}}),
            scorecards: %{},
            roll_count: 0

  def add_scorecard(state, player_id) do
    Map.put(state, :scorecards, Map.put(state.scorecards, player_id, %Yahtzee.Scorecard{}))
  end

  def remove_player(state, player_id) do
    Map.put(state, :scorecards, elem(Map.pop(state.scorecards, player_id), 1))
  end

  def compute_player_totals(state) do
    case Enum.all?(Map.to_list(state.scorecards), fn x ->
           Yahtzee.Scorecard.is_complete?(elem(x, 1))
         end) do
      true ->
        {:ok,
         Map.put(
           state,
           :scorecards,
           for(
             x <- Map.to_list(state.scorecards),
             into: %{player_id: %Yahtzee.Scorecard{}},
             do: {elem(x, 0), Yahtzee.Scorecard.compute_total(elem(x, 1))}
           )
         )}

      false ->
        {:not_finished, state}
    end
  end

  def end_turn(state, player_id, category) do
    cond do
      not Yahtzee.Scorecard.valid_category?(category) ->
        {:invalid_category, state}

      is_nil(Map.get(state.scorecards, player_id)) ->
        {:invalid_player, state}

      is_nil(Map.get(Map.get(state.scorecards, player_id), category)) ->
        {:category_set, state}

      true ->
        {:ok,
         Map.put(
           state,
           :scorecards,
           Map.put(
             state.scorecards,
             player_id,
             Yahtzee.Scorecard.score_category(
               Map.get(state.scorecards, player_id),
               category,
               state.dice
             )
           )
         )
         |> Map.put(:roll_count, 0)}
    end
  end

  def roll_dice(state) do
    if Map.get(state, :roll_count) == 3 do
      {:max_rolls, state}
    else
      {:ok,
       Map.put(
         state,
         :dice,
         for x <- Map.to_list(Map.get(state, :dice)), into: %{} do
           if Map.get(elem(x, 1), :hold) do
             {elem(x, 0), elem(x, 1)}
           else
             {elem(x, 0), %{:value => :rand.uniform(6), :hold => false}}
           end
         end
       )
       |> Map.put(:roll_count, Map.get(state, :roll_count) + 1)}
    end
  end

  def hold_die(state, die) do
    if is_nil(Map.get(Map.get(state.dice, die), :value)) do
      state
    else
      Map.put(
        state,
        :dice,
        Map.put(state.dice, die, Map.put(Map.get(state.dice, die), :hold, true))
      )
    end
  end

  def release_die(state, die),
    do:
      Map.put(
        state,
        :dice,
        Map.put(state.dice, die, Map.put(Map.get(state.dice, die), :hold, false))
      )
end
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
state = %Yahtzee.State{}
state = Yahtzee.State.add_scorecard(state, "me")
result = Yahtzee.State.roll_dice(state)
result = Yahtzee.State.end_turn(elem(result, 1), "me", :ones)
result = Yahtzee.State.end_turn(elem(result, 1), "me", :threes)
result = Yahtzee.State.compute_player_totals(elem(result, 1))
```
