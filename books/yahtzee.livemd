# Yahtzee

## Scorecard

```elixir
defmodule Yahtzee.Scorecard do
  @upper_section [:ones, :twos, :threes, :fours, :fives, :sixes]
  @upper_section_bonus_threshold 62
  @upper_section_bonus 25
  @lower_section [
    :three_of_kind,
    :four_of_kind,
    :full_house,
    :small_straight,
    :large_straight,
    :chance,
    :yahtzee
  ]
  @yahtzee_bonus 100

  defstruct ones: 0,
            twos: 0,
            threes: 0,
            fours: 0,
            fives: 0,
            sixes: 0,
            upper_section_bonus: 0,
            upper_section: 0,
            three_of_kind: 0,
            four_of_kind: 0,
            full_house: 0,
            small_straight: 0,
            large_straight: 0,
            chance: 0,
            yahtzee: 0,
            yahtzee_bonus: 0,
            lower_section: 0,
            grand_total: 0

  def compute_total(scorecard) do
    scorecard |> upper_total() |> lower_total() |> grand_total()
  end

  defp upper_total(scorecard) do
    total = Enum.reduce(Map.values(Map.take(scorecard, @upper_section)), 0, &(&1 + &2))

    if total > @upper_section_bonus_threshold do
      Map.put(
        Map.put(scorecard, :upper_section_bonus, @upper_section_bonus),
        :upper_section,
        total + @upper_section_bonus
      )
    else
      Map.put(scorecard, :upper_section, total)
    end
  end

  defp lower_total(scorecard) do
    Map.put(
      scorecard,
      :lower_section,
      @yahtzee_bonus * Map.get(scorecard, :yahtzee_bonus) +
        Enum.reduce(Map.values(Map.take(scorecard, @lower_section)), 0, &(&1 + &2))
    )
  end

  defp grand_total(scorecard) do
    Map.put(
      scorecard,
      :grand_total,
      Map.get(scorecard, :upper_section) + Map.get(scorecard, :lower_section)
    )
  end
end
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
scorecard = %Yahtzee.Scorecard{}
scorecard = Map.put(scorecard, :fives, 25)
scorecard = Map.put(scorecard, :sixes, 24)
scorecard = Map.put(scorecard, :fours, 20)

scorecard = Map.put(scorecard, :full_house, 25)
scorecard = Map.put(scorecard, :large_straight, 40)

Yahtzee.Scorecard.compute_total(scorecard)
```

## Yahtzee State

```elixir
defmodule Yahtzee.State do
  @dice_per_hand 5

  defstruct dice: for(i <- 1..@dice_per_hand, into: %{}, do: {i, %{value: nil, hold: false}}),
            scorecards: %{:player_id => %Yahtzee.Scorecard{}}

  def compute_player_totals(state) do
    Map.put(
      state,
      :scorecards,
      for(
        x <- Map.to_list(Map.get(state, :scorecards)),
        into: %{player_id: %Yahtzee.Scorecard{}},
        do: {elem(x, 0), Yahtzee.Scorecard.compute_total(elem(x, 1))}
      )
    )
  end

  def roll_dice(state) do
    Map.put(
      state,
      :dice,
      for x <- Map.to_list(Map.get(state, :dice)), into: %{} do
        if Map.get(elem(x, 1), :hold) do
          {elem(x, 0), elem(x, 1)}
        else
          {elem(x, 0), %{:value => :rand.uniform(6), :hold => false}}
        end
      end
    )
  end
end
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
state = %Yahtzee.State{}

Yahtzee.State.roll_dice(state)
```
